#!/usr/bin/env python3
import argparse
import json
import os

from firm import firm

DESCRIPTION = """firm-findmotifs - FIRM find motifs for miRvestigator"""

if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=DESCRIPTION)
    parser.add_argument('-ue', '--use_entrez', action='store_true',
                        help="input file uses entrez IDs instead of RefSeq")
    parser.add_argument('-t', '--tmpdir', default='tmp',
                        help="temporary directory")
    parser.add_argument('p3utrseqs', help="path to 3' UTR sequences file")
    parser.add_argument('g2refseq', help="path to gene2refseq.gz file")
    parser.add_argument('expdir', help='expression input directory')
    parser.add_argument('outdir', help='output directory')
    args = parser.parse_args()

    if not os.path.exists(args.outdir):
        os.makedirs(args.outdir)
    if not os.path.exists(args.tmpdir):
        os.makedirs(args.tmpdir)

    seqs = firm.read_sequences(args.p3utrseqs)
    refSeq2entrez = firm.make_refseq2entrez(args.g2refseq)

    # First stage: run Weeder on the input clusters and write out the
    # PSSMs to a JSON file
    fasta_files = firm.prepare_weeder_input(seqs, refSeq2entrez, args.use_entrez, args.expdir,
                                            args.tmpdir)
    weeder_pssms = firm.find_motifs(fasta_files, args.tmpdir)
    with open(os.path.join(args.outdir, 'pssms.json'), 'w') as outfile:
        json.dump(weeder_pssms, outfile)

    # Write the 3' UTR sequences to pass as as a filter for miRvestigator
    # we actually could use the original 3' UTR source files, but a line file is simpler
    with open(os.path.join(args.outdir, 'seqs.txt'), 'w') as outfile:
        for seq in seqs.values():
            outfile.write("%s\n" % seq)
